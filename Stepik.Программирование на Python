Задание № 1.

Коля каждый день ложится спать ровно в полночь и недавно узнал, что оптимальное время для его сна составляет X минут. 
Коля хочет поставить себе будильник так, чтобы он прозвенел ровно через X минут после полуночи, 
однако для этого необходимо указать время сигнала в формате часы, минуты. 
Помогите Коле определить, на какое время завести будильник.
Часы и минуты в выводе программы должны располагаться на разных строках (см. пример работы программы)
Помните, что для считывания данных нужно вызывать функцию input без аргументов!

Sample Input 1:
480
Sample Output 1:
8
0

Sample Input 2:
512
Sample Output 2:
8
32

Решение № 1.
n = int(input())
a = (n // 60)
s = (n % 60)
print(a)
print(s)

Решение № 2.
a=int(input())
print(a//60,a%60, sep='\n')

Задание № 2.

Катя узнала, что ей для сна надо X минут. В отличие от Коли, Катя ложится спать после полуночи в H часов и M минут. 
Помогите Кате определить, на какое время ей поставить будильник, чтобы он прозвенел ровно через X минут после того, как она ляжет спать.
На стандартный ввод, каждое в своей строке, подаются значения X, H и M. 
Гарантируется, что Катя должна проснуться в тот же день, что и заснуть. 
Программа должна выводить время, на которое нужно поставить будильник: в первой строке часы, во второй — минуты.

Sample Input 1:
480
1
2
Sample Output 1:
9
2

Sample Input 2:
475
1
55
Sample Output 2:
9
50

Решение № 1.
a = int(input())
s = int(input()) * 60
d = int(input())
print((a + s + d) // 60)
print((a + s + d) % 60)

Решение № 2.
t = int(input()) + 60 * int(input()) + int(input())
print(t // 60, t % 60, sep = '\n')

Задание № 3.

Из передачи “Здоровье” Аня узнала, что рекомендуется спать хотя бы A часов в сутки, 
но пересыпать тоже вредно и не стоит спать более B часов. 
Сейчас Аня спит H часов в сутки. Если режим сна Ани удовлетворяет рекомендациям передачи “Здоровье”, выведите “Это нормально”. 
Если Аня спит менее A часов, выведите “Недосып”, если же более B часов, то выведите “Пересып”.
Получаемое число A всегда меньше либо равно B.
На вход программе в три строки подаются переменные в следующем порядке: A, B, H.

Ршение № 1.
a = int(input()) 
b = int(input())
h = int(input())
if a < h <= b:
  print('Это нормально')
elif a > h:
  print('Недосып')
elif a < h:
  print('Пересып')
  
Решение № 2.
a, b, h = [int(input()) for i in range(3)]
print('Пересып' if h > b else 'Недосып' if h < a else 'Это нормально')

Задание № 4.
Требуется определить, является ли данный год високосным.
Напомним, что високосными годами считаются те годы, порядковый номер которых либо кратен 4, 
но при этом не кратен 100, либо кратен 400 (например, 2000-й год являлся високосным, а 2100-й будет невисокосным годом). 

Решение № 1.
a = int(input())
if (a % 4 == 0) and (a % 100 != 0) or (a % 400 == 0):
  print('Високосный')
else:
  print('Обычный')
  
Решение № 2.
y = int(input())
print('Високосный' if not y%400 or not y%4 and y%100 else 'Обычный')

Задание № 5.
Напишите простой калькулятор, который считывает с пользовательского ввода три строки: первое число, второе число и операцию, 
после чего применяет операцию к введённым числам ("первое число" "операция" "второе число") и выводит результат на экран.
Поддерживаемые операции: +, -, /, *, mod, pow, div, где 
mod — это взятие остатка от деления, 
pow — возведение в степень, 
div — целочисленное деление.
Если выполняется деление и второе число равно 0, необходимо выводить строку "Деление на 0!".
Обратите внимание, что на вход программе приходят вещественные числа.

Решение № 1.
a = float(input())
b = float(input())
c = str(input())

if c == '+':
  print(a + b)
if c == '-':
  print(a - b)
if c == '/' and b == 0:
  print('Деление на 0!')
elif c == '/':
  print(a / b)
if c == '*':
  print(a * b)
if c == 'mod'and b == 0:
  print('Деление на 0!')
elif c == 'mod':
  print(a % b)
elif c == 'pow':
  print(a ** b)
if c == 'div'and b == 0:
  print('Деление на 0!')
elif c == 'div':
  print(a // b)
  
Задание № 6.
Жители страны Малевии часто экспериментируют с планировкой комнат. Комнаты бывают треугольные, прямоугольные и круглые. 
Чтобы быстро вычислять жилплощадь, требуется написать программу, на вход которой подаётся тип фигуры комнаты и соответствующие 
параметры,
которая бы выводила площадь получившейся комнаты.
Для числа π в стране Малевии используют значение 3.14.

Решение № 1.

a = str(input())

if a == 'треугольник':
  q = int(input())
  w = int(input())
  e = int(input())
  p = ((q+w+e)/2)
  s = (((p*(p-q)*(p-w)*(p-e)))**0.5)
  print(s)
elif a == 'прямоугольник':
  q = int(input())
  w = int(input())
  print(q * w)
elif a == 'круг':
  q = int(input())
  print(q ** 2 * 3.14)

Задание № 7.
Напишите программу, которая получает на вход три целых числа, по одному числу в строке, 
и выводит на консоль в три строки сначала максимальное, потом минимальное, после чего оставшееся число.
На ввод могут подаваться и повторяющиеся числа.

Решение № 1.
a = int(input())
s = int(input())
d = int(input())

q = [a, s, d]

if max(q) == a and min(q) == s:
  print(max(q))
  print(min(q))
  print(d)
elif max(q) == a and min(q) == d:
  print(max(q))
  print(min(q))
  print(s)
elif max(q) == s and min(q) == a:
  print(max(q))
  print(min(q))
  print(d)
elif max(q) == s and min(q) == d:
  print(max(q))
  print(min(q))
  print(a)
elif max(q) == d and min(q) == a:
  print(max(q))
  print(min(q))
  print(s)
elif max(q) == d and min(q) == s:
  print(max(q))
  print(min(q))
  print(a)

Задание № 8.
В институте биоинформатики по офису передвигается робот. Недавно студенты из группы программистов написали для него программу, 
по которой робот, когда заходит в комнату, считает количество программистов в ней и произносит его вслух: "n программистов".
Для того, чтобы это звучало правильно, для каждого n нужно использовать верное окончание слова.
Напишите программу, считывающую с пользовательского ввода целое число n (неотрицательное), выводящее это число в консоль вместе 
с правильным образом изменённым словом "программист", для того, чтобы робот мог нормально общаться с людьми, 
например: 1 программист, 2 программиста, 5 программистов.
В комнате может быть очень много программистов. Проверьте, что ваша программа правильно обработает все случаи, 
как минимум до 1000 человек.

Решение № 1.
s = int (input())
n1 ="программистов"
n2 ="программист"
n3 ="программиста"
if  s>=0:
  if s==0:
    print(str(s) + n1)
  elif s%100>=10 and s%100<=20:
    print(str(s) + n1)
  elif s%10==1:
    print(str(s) + n2)
  elif s%10>=2 and s%10<=4:
    print(str(s) + n3)
  else:
    print(str(s) + n1)
    
Задание № 9.
В Институте биоинформатики между информатиками и биологами устраивается соревнование. 
Победителям соревнования достанется большой и вкусный пирог. В команде биологов a человек, а в команде информатиков — b человек.
Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки пирога любой команде, выигравшей соревнование, 
при этом каждому участнику этой команды должно достаться одинаковое число кусочков пирога. 
И так как не хочется резать пирог на слишком мелкие кусочки, нужно найти минимальное подходящее число.
Напишите программу, которая помогает найти это число. 
Программа должна считывать размеры команд (два положительных целых числа a и b, каждое число вводится на отдельной строке) 
и выводить наименьшее число d, которое делится на оба этих числа без остатка.

Решение № 1.
a = int(input())
s = int(input())
d = 1 
while not (d % a == 0 and d % s == 0):
  d += 1
print(d)

Решение № 2.
a=int(input())
b=int(input())
d=1
while (d%a+d%b)!=0:
    d+=1
print(d)

Задание № 10.
Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
Для каждого введённого числа проверить:
если число меньше 10, то пропускаем это число;
если число больше 100, то прекращаем считывать числа;
в остальных случаях вывести это число обратно на консоль в отдельной строке.

Решение № 1.
while True:
  a = int(input())
  if a < 10:
    continue
  if 9 < a < 101:
    print(a)
  elif a > 100:
    break
    
Задание № 11.

Напишите программу, на вход которой даются четыре числа a, b, c и d, каждое в своей строке. 
Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка [a;b] на все числа отрезка [c;d].
Числа a, b, c и d являются натуральными и не превосходят 10, a≤b, c≤d.
Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции. 
Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и строка таблицы.

Решение № 1.

a = int(input())
b = int(input())
c = int(input())
d = int(input())

for g in range (c,d+1):
    print('\t'+str(g),end='')
print(end='\n')
for i in range (a,b+1):
    print(str(i)+'\t',end='')
    for j in range (c,d+1):
        print(str(i*j),end='\t')
    print(end='\n')
    
Решение № 2.

a, b, c, d = (int(input()) for x in range(4))
print('', *range(c,d+1), sep='\t')
for x in range(a, b+1):
    print(x, *[y*x for y in range(c, d+1)], sep='\t')
    
Задание № 12.

GC-состав является важной характеристикой геномных последовательностей и определяется как процентное соотношение суммы всех гуанинов 
и цитозинов к общему числу нуклеиновых оснований в геномной последовательности. 
Напишите программу, которая вычисляет процентное содержание символов G (гуанин) и C (цитозин) в введенной строке 
(программа не должна зависеть от регистра вводимых символов).
Например, в строке "acggtgttat" процентное содержание символов G и C равно 410⋅100=40.0, 
где 4 -- это количество символов G и C,  а 10 -- это длина строки.

Решение № 1.

a = input()
cnt = 0
b = len(a)

for i in a:
  if i == 'g':
    cnt += 1
  if i == 'G':
    cnt += 1
  if i == 'c':
    cnt += 1
  if i == 'C':
    cnt += 1

print((cnt / b) * 100)

Задание № 13 (ОМГ!!)

Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты группы информатиков предложили 
использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
Кодирование осуществляется следующим образом:
s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ 
и количество его повторений в этой позиции строки.
Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность
на стандартный вывод. Кодирование должно учитывать регистр символов.

Решение № 1 (списано! =( )

a = input() + ' '
s = 0
n = a[0]
for i in a:       
    if n!=i:
        print(n + str(s), end = '')
        s=0
        n=i
    s+=1
    
Решение № 2.

dna = input()                    # считываем строку
print(dna[0],end='')             # выводим первый символ
cnt = 1                          # счетчик символов на единице
for i in range(0,len(dna)-1):    # итератор проходит по всем индексам символов кроме предпоследнего
    if dna[i] == dna[i+1]:       # сравниваем символ по текущему индексу со следующим
        cnt+=1                   # если символы одинаковые, то увеличиваем счетчик
    else :
        print(cnt,end='')        # если разные, то выводим значение счетчика
        print(dna[i+1],end='')   # выводим следующий символ
        cnt = 1                  # счетчик текущего символа на единице
print(cnt)  

Задание № 14.

Напишите программу, на вход которой подаётся список чисел одной строкой. 
Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, 
одним из соседей считается элемент, находящий на противоположном конце этого списка. 
Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
Если на вход пришло только одно число, надо вывести его же.
Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.

Решение № 1.

a = input().split()
open_list = []
b = list(map(int, a))
s = len(b)
for i, items in enumerate(b):
  if s == 1:
    print(b[0])
    break
  if i == 0:
    g = b[s-1] + b[1]
    open_list.append(g)
  elif i == s-1:
    g = b[s-2] + b[0]
    open_list.append(g)
  else:
    g = b[i-1] + b[i+1]
    open_list.append(g)
if open_list == []:
  pass
else:
  print(' '.join([str(i) for i in open_list]))
  
Решение № 2.

src = [int(i) for i in input().split()]
if len(src) == 1:
    print(src[0])
else:
    [print( src[i-1] + src[(i+1) % len(src)] ,end=' ') for i in range(len(src))]
    # выражение src[(i+1) % len(src)] на выходе для src = [1, 3, 5, 6, 10] даст [3, 5, 6, 10, 1]
    # потому, что (i+1) % len(src) даёт 1 2 3 4 0
    # т.е. таким образом 0й элемент оказывается в конце списка (как будто повернули циферблат)
    # таким образом если при обращении к i+1 случится выход за границу диапазона для последнего элемента
    # то при обращении к (i+1) % len(src) элементу выхода не произойдет
    # поэтому складывая -1й элемент с [(i+1) % len(src)]-тым элементом
    # мы выполним условие найти сумму предыдущего и следующего элементов
    # [print( src[(i+1) % len(src)]) for i in range(len(src))]
 
Решение № 3.
 
lst= [int(i) for i in input().split()]
if len(lst) == 1:
        print(lst[0])
else:
    for i in range(len(lst)):
        print(lst[i-1] + lst[i+1-len(lst)], end=' ')

Задание № 15

Напишите программу, которая принимает на вход список чисел в одной строке и выводит на экран в одну строку значения, 
которые повторяются в нём более одного раза.
Для решения задачи может пригодиться метод sort списка.
Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.

Решение № 1.

input_list = [int(i) for i in input().split()]
open_list = []
for i in input_list:
  if open_list.count(i) != 1:
    if input_list.count(i) >= 2:
      open_list.append(i)
  else:
    pass
print(' '.join([str(i) for i in open_list]))

Решение № 2.

s = input().split()
print (*(i for i in set(s) if s.count(i) > 1))

Задание № 16.

Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0 
и сразу после этого выводит сумму квадратов всех считанных чисел.
Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю 
и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.

Решение № 1.

open_list = []
n = None

while n == n:
  n = int(input())
  open_list.append(n)
  if sum(open_list) == 0:
    break
  else:
    continue
    
sqare_list = []
for i in open_list:
  sqare_list.append(i * i)

print(sum(sqare_list))

Решение № 2.

s=[int(input())]
while sum(s)!=0: s.append(int(input()))
print(sum([i**2 for i in s]))

Задание № 17.

Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... 
(число повторяется столько раз, чему равно). 
На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна отобразить программа.
На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.

Решение № 1.

int_in = int(input())
open_list = []

for i in range(1, int_in + 1):
    short_list = [i] * i
    open_list.extend(short_list)
    
print(' '.join(map(str, open_list[0:int_in]))) 

Решение № 2.

n = int(input())
a = []
i = 0
while len(a) < n:
    a += [i] * i
    i += 1
print(*a[:n])

Решение № 3.

n=int(input())
s=[]
for i in range(1,n+1):
    s+=[i]*i
for i in range(n):
    print(s[i], end =' ')
 
Задание № 18.
 
Напишите программу, которая считывает список чисел lst из первой строки и число x из второй строки, 
которая выводит все позиции, на которых встречается число x в переданном списке lst.
Позиции нумеруются с нуля, если число x не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы).
Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.

Решение № 1.

in_list = input().split()
number = str(input())
open_list = []

for index, item in enumerate(in_list):
    if number == item:
        open_list.append(index)
        print(index, end = ' ')
    if number not in in_list:
        print('Отсутствует')
        break

Решение № 2.

l, n = [int(i) for i in input().split()], int(input())
print(*[x for x in range(len(l)) if l[x]==n] if n in l else ["Отсутствует"])



 
